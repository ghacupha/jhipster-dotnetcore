using <%= namespace %>.Models;
using Microsoft.AspNetCore.Identity;
using Microsoft.AspNetCore.Identity.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore;

namespace <%= namespace %>.Data {
    <%_ if (authenticationType === 'jwt') { _%>
    public class ApplicationDatabaseContext : IdentityDbContext<
        User, Role, string,
        IdentityUserClaim<string>,
        UserRole,
        IdentityUserLogin<string>,
        IdentityRoleClaim<string>,
        IdentityUserToken<string>> {
    <%_ } else { _%>
    public class ApplicationDatabaseContext : DbContext 
    {
    <%_ } _%>
        public ApplicationDatabaseContext(DbContextOptions<ApplicationDatabaseContext> options) : base(options)
        {
        }

        <%_ entities.forEach(entity => {
            if(entity.name.toUpperCase() !== entityClass.toUpperCase()) { _%>
        public DbSet<<%= entity.name %>> <%= pluralize(entity.name) %> { get; set; }
                <%_ entity.definition.relationships.forEach(relationship => {
                    if (relationship.relationshipType === 'many-to-many') {
                        if (relationship.ownerSide) {
                            let relationshipNamePascalized = toPascalCase(relationship.relationshipName);
                            let otherEntityRelationshipNamePascalized = toPascalCase(relationship.otherEntityRelationshipName);
                            let joinEntityClassNamePascalized = otherEntityRelationshipNamePascalized + relationshipNamePascalized; _%>
        public DbSet<<%= joinEntityClassNamePascalized %>> <%= pluralize(joinEntityClassNamePascalized) %> { get; set; }
                        <%_ }
                    }
                });
            }
        }); _%>
        public DbSet<<%= pascalizedEntityClass %>> <%= pascalizedEntityClassPlural %> { get; set; }
        <%_ relationships.forEach(relationship => {
            if (relationship.relationshipType === 'many-to-many') {
                if (relationship.ownerSide) {; _%>
        public DbSet<<%= relationship.joinEntityNamePascalized %>> <%= relationship.joinEntityFieldNamePascalizedPlural %> { get; set; }
                <%_ }
            }
        })_%>

        protected override void OnModelCreating(ModelBuilder builder)
        {
            base.OnModelCreating(builder);
            <%_ if (authenticationType === 'jwt') { _%>
            builder.Entity<UserRole>(userRole => {
                userRole.HasKey(ur => new {ur.UserId, ur.RoleId});

                userRole.HasOne(ur => ur.Role)
                    .WithMany(r => r.UserRoles)
                    .HasForeignKey(ur => ur.RoleId)
                    .IsRequired();

                userRole.HasOne(ur => ur.User)
                    .WithMany(r => r.UserRoles)
                    .HasForeignKey(ur => ur.UserId)
                    .IsRequired();
            });

            builder.Entity<User>()
                .HasMany(e => e.UserRoles)
                .WithOne()
                .HasForeignKey(e => e.UserId)
                .IsRequired()
                .OnDelete(DeleteBehavior.Cascade);
            <%_ } _%>
            <%_ entities.forEach(entity => {
                if(entity.name.toUpperCase() !== entityClass.toUpperCase()) {
                    entity.definition.relationships.forEach(relationship => {
                        if (relationship.relationshipType === 'many-to-many') {
                            if (relationship.ownerSide) {
                                let relationshipNamePascalized = toPascalCase(relationship.relationshipName);
                                let otherEntityRelationshipNamePascalized = toPascalCase(relationship.otherEntityRelationshipName);
                                let joinEntityClassNamePascalized = otherEntityRelationshipNamePascalized + relationshipNamePascalized;
                                let entityClassNamePascalized = entity.name;
                                let otherEntityClassNamePascalized = toPascalCase(relationship.otherEntityName);
                                let ownerRelationshipFieldName = entityClassNamePascalized;
                                let nonOwnerRelationshipFieldName = otherEntityClassNamePascalized; _%>
            builder.Entity<<%= joinEntityClassNamePascalized %>>()
                .HasKey(t => new { t.<%= ownerRelationshipFieldName %>Id, t.<%= nonOwnerRelationshipFieldName %>Id });

                            <%_ }
                        }
                    });
                }
            });
            relationships.forEach(relationship => {
                if (relationship.relationshipType === 'many-to-many') {
                    if (relationship.ownerSide) {
                        let ownerRelationshipFieldName = pascalizedEntityClass;
                        let nonOwnerRelationshipFieldName = relationship.otherEntityNamePascalized; _%>
            builder.Entity<<%= relationship.joinEntityNamePascalized %>>()
                .HasKey(t => new { t.<%= ownerRelationshipFieldName %>Id, t.<%= nonOwnerRelationshipFieldName %>Id });

                    <%_ }
                }
            })_%>
        }
    }
}